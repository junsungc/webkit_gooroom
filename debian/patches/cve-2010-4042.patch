Description: fix cve-2010-4042
Author: Michael Gilbert <michael.s.gilbert@gmail.com>
Origin: http://trac.webkit.org/changeset/68096
Index: webkit/WebCore/dom/Attr.cpp
===================================================================
--- webkit.orig/WebCore/dom/Attr.cpp	2010-11-17 22:06:14.000000000 -0500
+++ webkit/WebCore/dom/Attr.cpp	2010-11-17 22:06:18.000000000 -0500
@@ -117,13 +117,21 @@
     return value();
 }
 
-void Attr::setValue(const AtomicString& value, ExceptionCode&)
+void Attr::setValue(const AtomicString& value)
 {
     m_ignoreChildrenChanged++;
     removeChildren();
     m_attribute->setValue(value);
     createTextChild();
     m_ignoreChildrenChanged--;
+}
+
+void Attr::setValue(const AtomicString& value, ExceptionCode&)
+{
+    if (m_element && m_element->isIdAttributeName(m_attribute->name()))
+        m_element->updateId(m_element->getIDAttribute(), value);
+
+    setValue(value);
 
     if (m_element)
         m_element->attributeChanged(m_attribute.get());
@@ -167,7 +175,10 @@
         if (n->isTextNode())
             val += static_cast<Text *>(n)->data();
     }
-    
+
+    if (m_element && m_element->isIdAttributeName(m_attribute->name()))
+        m_element->updateId(m_attribute->value(), val);
+
     m_attribute->setValue(val.impl());
     if (m_element)
         m_element->attributeChanged(m_attribute.get());
Index: webkit/WebCore/dom/Attr.h
===================================================================
--- webkit.orig/WebCore/dom/Attr.h	2010-11-17 22:06:14.000000000 -0500
+++ webkit/WebCore/dom/Attr.h	2010-11-17 22:06:18.000000000 -0500
@@ -48,6 +48,7 @@
 
     const AtomicString& value() const { return m_attribute->value(); }
     void setValue(const AtomicString&, ExceptionCode&);
+    void setValue(const AtomicString&);
 
     Attribute* attr() const { return m_attribute.get(); }
     const QualifiedName& qualifiedName() const { return m_attribute->name(); }
Index: webkit/WebCore/dom/Element.cpp
===================================================================
--- webkit.orig/WebCore/dom/Element.cpp	2010-11-17 22:06:14.000000000 -0500
+++ webkit/WebCore/dom/Element.cpp	2010-11-17 22:06:18.000000000 -0500
@@ -576,7 +576,10 @@
     else if (!old && !value.isNull())
         namedAttrMap->addAttribute(createAttribute(QualifiedName(nullAtom, localName, nullAtom), value));
     else if (old && !value.isNull()) {
-        old->setValue(value);
+        if (Attr* attrNode = old->attr())
+            attrNode->setValue(value);
+        else
+            old->setValue(value);
         attributeChanged(old);
     }
 
@@ -605,7 +608,10 @@
     else if (!old && !value.isNull())
         namedAttrMap->addAttribute(createAttribute(name, value));
     else if (old) {
-        old->setValue(value);
+        if (Attr* attrNode = old->attr())
+            attrNode->setValue(value);
+        else
+            old->setValue(value);
         attributeChanged(old);
     }
 
Index: webkit/WebCore/dom/Document.cpp
===================================================================
--- webkit.orig/WebCore/dom/Document.cpp	2010-11-17 22:06:14.000000000 -0500
+++ webkit/WebCore/dom/Document.cpp	2010-11-17 22:06:18.000000000 -0500
@@ -1082,8 +1082,10 @@
 
     if (m_elementsById.get(elementId.impl()) == element)
         m_elementsById.remove(elementId.impl());
-    else
+    else {
+        ASSERT(m_inRemovedLastRefFunction || m_duplicateIds.contains(elementId.impl()));
         m_duplicateIds.remove(elementId.impl());
+    }
 }
 
 Element* Document::getElementByAccessKey(const String& key) const
Index: webkit/WebCore/dom/Element.h
===================================================================
--- webkit.orig/WebCore/dom/Element.h	2010-11-17 22:06:14.000000000 -0500
+++ webkit/WebCore/dom/Element.h	2010-11-17 22:20:19.000000000 -0500
@@ -100,6 +100,7 @@
 
     virtual PassRefPtr<DocumentFragment> createContextualFragment(const String&, FragmentScriptingPermission = FragmentScriptingAllowed);
 
+    bool isIdAttributeName(const QualifiedName&) const;
     const AtomicString& getIDAttribute() const;
     bool hasAttribute(const QualifiedName&) const;
     const AtomicString& getAttribute(const QualifiedName&) const;
@@ -386,6 +387,15 @@
         doc->addElementById(newId, this);
 }
 
+inline bool Element::isIdAttributeName(const QualifiedName& attributeName) const
+{
+    // FIXME: This check is probably not correct for the case where the document has an id attribute
+    // with a non-null namespace, because it will return false, a false negative, if the prefixes
+    // don't match but the local name and namespace both do. However, since this has been like this
+    // for a while and the code paths may be hot, we'll have to measure performance if we fix it.
+    return attributeName == idAttributeName();
+}
+
 } //namespace
 
 #endif
